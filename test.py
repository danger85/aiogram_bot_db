text = 'Раз. Два. Три. Четыре. Пять. Прием!'
text2 = 'Да? Вы точно уверены? Может быть, вам это показалось?.. Ну, хорошо, приходите завтра, тогда и посмотрим, что можно сделать. И никаких возражений! Завтра, значит, завтра!'
text3 = '— Я всё очень тщательно проверил, — сказал компьютер, — и со всей определённостью заявляю, что это и есть ответ. Мне кажется, если уж быть с вами абсолютно честным, то всё дело в том, что вы сами не знали, в чём вопрос.'
text4 = 'Да? Вы точно уверены? Может быть, вам это показалось?.. Ну, хорошо, приходите завтра, тогда и посмотрим, что можно сделать. И никаких возражений! Завтра, значит, завтра!'

import os
def _get_part_text(text,start,lenght):
    sym=[".",",",":","!","?",";"]
    #print("Len of text is ", len(text), " desired lenght is ", lenght)
    txt=text[start:start+lenght]
    rest_len=len(text[start+lenght:])
    offset=0
    for i in range(rest_len):
        if text[start+lenght+i] in sym:
            offset+=1
        if i>=2:
            break

    if txt[-1] in sym:
        if offset==0:
            return txt, len(txt)
        else:
            txt=txt[:-offset-1]
    last_sym_pos=0
    for each_sym in sym:
        cur_last_sym_pos=txt.rfind(each_sym)
        if cur_last_sym_pos>last_sym_pos:
            last_sym_pos= cur_last_sym_pos
    #print(txt[last_sym_pos-1],txt[last_sym_pos])

    txt=txt[0:last_sym_pos+1]

    return txt, len(txt)

# Не удаляйте эти объекты - просто используйте
book: dict[int, str] = {}
PAGE_SIZE = 100


# Дополните эту функцию, согласно условию задачи
def prepare_book(path: str) -> None:
    book_text = open(path, 'r',encoding='utf-8').read()
    start=0
    lenght=100
    i=1
    while start<len(book_text) :
        book[i] =_get_part_text(book_text,start,lenght)[0].lstrip()
        start+=_get_part_text(book_text,start,lenght)[1]
        i+=1

prepare_book("book.txt")
#print(book)

"""
book = {1: 'Пошлость собственной мечты была так заметна, что Таня понимала:',
        2: 'даже мечтать и горевать ей приходится закачанными в голову штампами, и по-другому не может быть,',
        3: 'потому что через все женские головы на планете давно проложена ржавая узкоколейка,',
        4: 'и эти мысли — вовсе не ее собственные надежды,',
        5: 'а просто грохочущий у нее в мозгу коммерческий товарняк.',
        6: 'Словно бы на самом деле думала и мечтала не она,',
        7: 'а в piпустом осеннем сквере горела на стене дома огромная панель,',
        8: 'показывая равнодушным жирным воронам рекламу бюджетной косметики.'}
"""
def junction_list():
    l=[10, 20, 30, 40, 50]
    print(sum([i for i in l])/len(l))

    list1 = [1, 2, 3, 4, 5]
    list2 = [3, 4, 5, 6, 7]

    list3=[]
    list3.append([i for i in list1 if i in list2])
    print(*list3)



def blagodatka_data():
    row_name = ["Валюта", "операция", "до 200", "<10.000", ">10.000"]
    for x,i in enumerate(row_name):
        print("x is number = ",x)
        print("i is value = ",i)
    data = [['Валюта', '$', '$', '€', '€'],[ 'операция', 'покупка', 'продажа', 'покупка', 'продажа'], ['до 200','92.50', '94.70', '97.80', '99.80'], ['<10.000','92.70', '94.50', '98.00', '99.60'], ['>10.000','92.70', '94.50', '98.00', '99.60']]
    print(*[i for i in data])

def test_with_dict():
    di = {"1":"one","2":"two"}
    print(str(di))
    new_di= eval(str(di))
    print(type(new_di), " ", new_di)
    print(new_di["1"])

import pandas as pd
df= pd.read_csv("37_25.csv")
#print(df.shape)
values_from_file=df.values.tolist()
#print(values_from_file)
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
# Пример данных (X - матрица признаков)
#X = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
#print("dataframe  =>",df.head())
# Стандартизация данных
scaler = StandardScaler()
values_from_file_std = scaler.fit_transform(values_from_file)
#print("df standard =>",df_std)

# Создание объекта PCA
pca = PCA(svd_solver="full")  # Здесь n_components - количество главных компонент, которые вы хотите получить

# Применение PCA к стандартизированным данным
values_from_file_pca = pca.fit_transform(values_from_file_std)
#print ("df_pca ->",values_from_file_pca)
#print(values_from_file_pca.shape)


def first_task(file_to_read:str):
    import numpy as np

    # Ваши данные
    data = [[-21.02043182288161, -19.60765174271248, -19.3802664258528, -5.94095223307644, 16.866377729694815, 21.314366365107286, -9.286641881343641, 1.2059936220804603, -16.144492668807708, 20.05799006667616], [-24.340982922936945, -18.22890007151687, -19.565034456523055, -7.199030497351176, 18.566759733410382, 22.24813929988894, -7.311901522310334, 0.9798138663711536, -16.447251767357034, 20.493061389176564], [21.573498347631016, -1.195481923090988, -13.662428467079827, 1.2657397724669348, 7.282422309266042, 10.859079301835964, -20.2619815909209, 15.590519718103135, -11.75246085592677, 13.68740784518992], [14.19273766218314, -14.180658530322424, -6.515670597095262, 5.965424944061216, -21.594373003092223, 15.30806325578666, 8.567747616397186, -22.898263756508722, 16.080232677608183, -4.415824177622649], [-22.03424093049562, -18.123628225070092, -18.097000129442105, -5.409511127629792, 14.084550314024947, 19.728082630977404, -6.3070287777876475, 0.7591334556824221, -15.907750208448858, 20.98074896395097], [21.907820981177437, -2.2416333768919574, -16.950150179658845, 4.9481088758226806, 6.199293662255154, 7.6605859407610595, -21.24701496903401, 10.094533282070408, -9.498641212746058, 15.887582163299273], [-22.250412672545192, -17.355181105394852, -15.238117148711384, -5.854726631162805, 15.268017192537682, 18.995713895037383, -8.27876932822263, -1.1756561528957388, -17.253883636873017, 20.68109825675625], [-20.541075017981743, -17.07787488395948, -16.96296831285637, -5.988674900234342, 17.67464650281621, 22.745999943925376, -8.124404023153721, -0.09152910198436892, -15.166893921031493, 18.57124301476816], [21.074522957964103, -1.3456938115445092, -12.663182959251412, 2.738254321332847, 7.80935881310805, 7.820627116767257, -17.847057449564907, 13.149819971329062, -11.04703632352388, 15.346466174286078], [-26.463232788623696, -1.712248653692528, -5.588028719650879, 1.6738352400066068, 23.165109126109275, 19.450132941552944, 12.92887534191183, -1.8500076339423808, 10.2895472271545, -25.99957451470552], [13.010997714790612, -16.04637666765047, -6.471133470466546, 6.291417949236078, -22.581895140836767, 16.050786593192477, 7.75181538152919, -23.67245951682364, 13.062435850535188, -6.354405049087081], [14.250765375491556, 6.70613886910979, -2.997878077619277, 21.88459875844276, 17.526105774584156, -16.525399937506254, 4.295643810407941, 6.396563061740969, 11.136360624119758, 23.145593707556177], [15.57897176218226, 5.662927725795866, -4.455819019421288, 23.02030525207571, 19.725642288274383, -14.260691958696082, 5.840432563817509, 3.816990997678356, 6.80839960022189, 21.923711847006192], [20.018043526644608, 0.7781133428879422, -13.647830909203025, 1.96455916670416, 4.103991953041682, 6.926951788591066, -21.412635102713168, 11.945918267446556, -11.590228667094552, 11.987666070981936], [14.760963546545511, 3.9248972535049615, -3.2831640985793062, 24.51197751358608, 19.919807796349694, -16.057150022836492, 3.853553394516641, 2.0293558799844904, 10.20376969777556, 21.136947611485024], [-24.368598022676967, -2.767956202719091, -8.049154447282044, -0.3101400934757357, 21.301473650879487, 18.120965084388985, 13.159167055678086, -0.6332653284871299, 10.574003364682396, -23.711235440658523], [-23.414724448679433, -19.59960020041348, -19.23994313536104, -5.489830742589086, 14.84473106864587, 23.806301222410006, -7.033847742427321, -4.56814673761889, -16.327419402437947, 17.238429833501858], [12.902801011695107, 3.5122344702184325, -1.7087491280258351, 25.276374296056943, 18.89356326017643, -15.779291047399816, 3.948498733477408, 4.292911813771704, 9.758671432320792, 18.753588399713223], [20.51165409282003, -2.996168272334728, -13.27500716655698,
5.0484025867199325, 6.027424531870369, 9.780992700726738, -18.399795160520895, 13.577759143566972, -10.696847824212872, 12.058996838275341], [-27.183138108915763, -1.777097721278835, -7.801871925504301, 2.355531465786893, 21.541881738253924, 18.686650646160704, 15.566346435213639, -4.531667154112247, 10.807234261671184, -22.99195763300825], [12.947283912759023, -17.570585918904094, -7.145756087640978, 7.9933721611625055, -24.23485992600529, 17.576762319371106, 6.687369503695862, -23.06173670476459, 15.722365677418596, -4.075686012873345], [15.264727448488616, 6.4351586285239275, -4.859630411084341, 24.796981595808955, 20.03941530922006, -15.906804869415868, 4.374604288057292, 4.128606947918305, 9.426202782944701, 21.10672188677386], [-22.904639407063893, -18.706454388835635, -19.579823569506864, -6.732487578129991, 16.145354305971892, 21.605186710860295, -11.69737759244813, -2.1118351515904488, -17.808960439641066, 18.900621934466365], [14.629028142956852, 7.33335120925687, -1.5567858994884802, 23.21584129440518, 21.006490668637174, -15.54545858797986, 5.252054218733172, 3.0921608568746124, 8.58647293616716, 24.191793704086624], [21.77290657002356, 1.1245689964972871, -15.479037924800688, 6.364096513755393, 4.752772139036498, 8.60230559272702, -19.18980550323833, 12.185232711733864, -11.850407115190828, 14.272407982667488], [-23.56080954164853, -17.762902609747513, -17.84747444732, -8.252031363691572, 17.209143998496018, 24.689257153315538, -6.940331348225599, -3.3503092331960733, -17.03558937409013, 18.533069927774452], [16.44172862552423, 9.703700980772346, -2.658215120577906, 20.708704149730742, 19.503503949856366, -13.582394013844713, 5.1876511499500255, 3.646961719840605, 9.361829501024337, 22.252799488540695], [-24.92425435611016, 0.17876007764961188, -5.62287672558406, -0.39931816233923995, 18.704225594819377, 17.093445058601954, 13.8640864389323, -1.1463660961338535, 9.718198592751069, -24.47539882853636], [-28.426931101900763, -3.115210994047283, -5.649709389905608, 2.17604930160298, 22.898475846205606, 18.88795230688128, 12.1639696503005, -1.0576997155653625, 9.609962394443087, -23.866568118272156], [14.8458469303354, -13.942192713633784, -5.7103656255807325, 7.060069818857733, -21.059467337564488, 16.598636579337832, 4.246978257917509, -23.098343248896622, 17.143754420894982, -2.417384585230769], [12.48575408263097, -12.15226418508412, -7.508481895546892, 5.434522010360748, -22.191340996703698, 16.185729086066203, 6.298858632542476, -26.830168710206927, 14.573568494652148, -5.0657738044679865], [14.881932996016456, -16.511833759129804, -8.661605602493209, 4.61645153800269, -26.067434697206675, 16.79241311882503, 6.6081976455380245, -26.479359755099896, 17.870609140712894, -6.3146264091807724], [13.370611483202236, 5.052467252073408, -3.1073257526126072, 23.619344014121, 21.092304130352034, -14.357048808089088, 6.096775752998468, 2.051227475726885, 8.836143445669554, 20.906965186312288], [22.83345793927037, -4.11961097917218, -17.851916299624374, 2.2930864528986685, 3.7690417762118513, 8.017286751739581, -17.389962953128446, 11.1189290052439, -10.961172169413185, 13.371007618785564], [19.61605806524611, -3.4963094789305584, -12.017793048445508, 2.7722311886874578, 7.229227147816719, 7.69606560172777, -20.984260152793773, 13.563293005301352, -10.030329909089575, 14.104427899013622], [11.500998422657842, -14.682114441980096, -5.759008944756752, 4.55500388242736, -24.586073120641288, 17.865109676916806, 6.713759322921316, -23.74993985516276, 15.690935524219272, -2.235209578579503], [-21.588751828055948, -18.33252594745735, -20.39917645342308, -7.6650232033150045, 13.868993416957144, 26.057879905505754, -9.29107643630267, 1.2990211678603487, -16.82474496375087, 19.4764067340262], [15.776428014728722, 6.6850651486829005, -2.526352568605868, 22.017563458370034, 20.422595319871128, -14.909377622423595, 5.285304176538983, 4.563213636948721, 11.371013052556524, 22.33233899251547], [-25.36395713719524, 0.8249125567271326, -8.320362739594534, 4.081972051741098, 20.204386839691647, 20.522456433205285, 13.202179938103171, -1.3395588071870779, 10.889849055468927, -23.293381767677392], [-26.75135873624668, -1.8711889227145488, -7.499949082690027, 2.7950709297300644, 19.97026414034397, 17.815045761966413, 10.931133673439836, -1.7375950966280616, 9.868434815100196, -22.915327162669925], [-22.751443008815624, -19.405744380145563, -19.85047262685313, -7.42742113216345, 19.40018498932381, 23.49379512618788, -9.44780727732164, 0.1809875735911246, -13.438341588206107, 16.960412915730878], [-26.14626032705089, -1.1537212548211002, -8.94637695395023, 0.19169965046608484, 22.077934511167907, 18.51351148274859, 12.204734349712751, -4.296402129618017, 12.814953192698471, -22.387180127162715], [-29.786003133271777, -3.037453623506678, -7.005260079442792, 4.311163438175461, 20.71076610504712, 17.229208200178423, 15.73470272460736, -0.8188224093201885, 9.862200912273801, -26.084851478276505], [15.634839287557984, 8.016682089666956, -3.7349534262521833, 20.90122013551293, 18.581131741413287, -15.472194005129863, 6.0533441371506065, 2.347672120071053, 8.375066795111934, 23.352548343742065], [11.40906634743076, -14.411345148507772, -6.52313715860449, 6.007185549152998, -24.55860722844419, 17.10081664077464, 7.557988098336177, -23.669657972070038, 15.535860437398496, -6.265396258972387], [-26.60819379288093, -1.8216561698744071, -10.815227230407698, 2.135792059067729, 22.815996283976595, 17.48351493816738, 12.497931560148912, -2.6157316884878528, 8.650709648686055, -24.491662492285517], [21.03521308756316, 0.84345103340857, -15.269535017938612, 4.631159828210688, 6.104061500103035, 9.754991986315757, -20.279790523323623, 9.194614278071326, -8.384330263848316, 12.049534240319481], [11.683656516537024, 7.318166455730026, -1.3903838661125398, 23.77480453514549, 18.95943451575022, -16.360220810476335, 5.935533274981056, 1.8059098036886123, 10.332340176724212, 22.678902795749888], [15.95832628730586, 5.975991730227976, -3.0851329256452287, 23.08083342715576, 17.163809433962214, -15.648535583691746, 4.47621196893847, 2.6652802036641354, 11.00908381554878, 20.68337110360863], [-24.196844983495087, -19.58623495529498, -18.75361472886865, -8.833034881956895, 13.759426494001668, 20.7382268881124, -5.513597917303971, -1.943515720167412, -14.602321624809347, 18.8004792772452], [11.880189250651936, -12.298579210221655, -3.689655938289936, 5.8890432014967455, -23.24163395381224, 15.532883796971557, 5.582448339928741, -22.474950797903972, 15.75117181824674, -8.669006272144376], [16.425071505126326, -15.504076158777716, -4.504490237409057, 2.5560868858241887, -21.429781986725335, 16.72446925508196, 5.464796304932387, -25.7351194500804, 15.078214412041524, -5.956052697633105], [22.944681444916917, -0.40164591988888354, -15.522165181082363, 2.1550222357079902, 9.012942998717508, 9.333987755505996, -21.06343965360895, 12.324135285553773, -11.55903298263389, 12.624139064505075], [13.26927802407857, -16.43955607801812, -4.00783122994382, 5.318637595138812, -22.211649761041286, 15.042163764980556, 5.918357750188508, -26.347906883721944, 12.843192963927548, -5.208150584561111], [-25.48547482337876, -3.714594574771617, -6.217395468540676, 0.8337460493364977, 20.95277667081164, 17.473599509536275, 14.218259020642764, 0.45602734554207336, 9.336096772917353, -23.180488783118044], [-18.995983869186748, -17.346529020418718, -20.655236470262015, -6.0743871646155325, 17.025922821535964, 23.074298428113817, -8.1160908776672, -0.5307638991626172, -14.525740691415391, 22.34886383690236], [-25.422130499489807, -0.11865176739865624, -8.925620772500787, 0.10977834254584407, 22.419150257909017, 18.861880160143674, 13.074121499791344, 0.6870661560673508, 8.206655934207701, -24.396364134086127], [21.455825226860785, -2.762640039968514, -15.110358985668867, 4.938080290369484, 8.500701380393892, 9.528191929972369, -17.836691956534448, 12.238138327626508, -10.975556257538123, 10.65311117298382], [13.844392644503355, -14.471585425981065, -6.626559587470968, 3.051205403713148, -23.009794009902865, 16.342201755199433, 5.114139138823164, -23.2651270177573, 13.530410639275127, -7.185886164446398]]
    # 1. Стандартизация данных
    data_standardized = (np.array(data) - np.mean(data, axis=0)) / np.std(data, axis=0)

    # 2. Рассчет матрицы ковариации
    cov_matrix = np.cov(data_standardized, rowvar=False)

    # 3. Найдите собственные значения и собственные векторы
    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)

    # 4. Выберите два наибольших собственных значения и соответствующие им собственные векторы
    top_eigenvalues = eigenvalues[:2]
    top_eigenvectors = eigenvectors[:, :2]

    # 5. Преобразование данных
    data_transformed = np.dot(data_standardized, top_eigenvectors)

    # 6. Найдите координаты первого объекта относительно первых двух главных компонент
    first_object_coordinates = np.dot(data_standardized[0], top_eigenvectors)

    # 7. Найдите долю объясненной дисперсии
    explained_variance_ratio = np.sum(top_eigenvalues) / np.sum(eigenvalues)

    print("Координаты первого объекта относительно первой главной компоненты:", first_object_coordinates[0])
    print("Координаты первого объекта относительно второй главной компоненты:", first_object_coordinates[1])
    print("Доля объясненной дисперсии при использовании двух главных компонент:", explained_variance_ratio)


first_task("37_25.csv")